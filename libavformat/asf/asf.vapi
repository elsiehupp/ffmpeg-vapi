/***********************************************************
Copyright (c) 2000, 2001 Fabrice Bellard

This file is part of FFmpeg.

FFmpeg is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

FFmpeg is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with FFmpeg; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
***********************************************************/

public enum ASFDataType {
    ASF_UNICODE,
    ASF_BYTE_ARRAY,
    ASF_BOOL,
    ASF_DWORD,
    ASF_QWORD,
    ASF_WORD,
    ASF_GUID,
}

public struct ASFMainHeader {
    /***********************************************************
    generated by client computer
    ***********************************************************/
    ff_asf_guid guid;
    /***********************************************************
    in bytes
    (invalid if broadcasting)
    ***********************************************************/
    uint64 file_size;
    /***********************************************************
    time of creation, in 100-nanosecond units since 1.1.1601
    (invalid if broadcasting)
    ***********************************************************/
    uint64 create_time;
    /***********************************************************
    play time, in 100-nanosecond units
    (invalid if broadcasting)
    ***********************************************************/
    uint64 play_time;
    /***********************************************************
    time to send file, in 100-nanosecond units
    (invalid if broadcasting) (could be ignored)
    ***********************************************************/
    uint64 send_time;
    /***********************************************************
    timestamp of the first packet, in milliseconds
    if nonzero - subtract from time
    ***********************************************************/
    uint32 preroll;
    /***********************************************************
    preroll is 64 bits - but let's just ignore it
    ***********************************************************/
    uint32 ignore;
    /***********************************************************
    0x01 - broadcast
    0x02 - seekable
    rest is reserved should be 0
    ***********************************************************/
    uint32 flags;
    /***********************************************************
    size of a data packet
    (invalid if broadcasting)
    ***********************************************************/
    uint32 min_pktsize;
    /***********************************************************
    shall be the same as for min_pktsize
    (invalid if broadcasting)
    ***********************************************************/
    uint32 max_pktsize;
    /***********************************************************
    bandwidth of stream in bps
    should be the sum of bitrates of the
    individual media streams
    ***********************************************************/
    uint32 max_bitrate;
}


public struct ASFIndex {
    uint32 packet_number;
    uint16 packet_count;
    uint64 send_time;
    uint64 offset;
}

//  extern const ff_asf_guid ff_asf_header;
//  extern const ff_asf_guid ff_asf_file_header;
//  extern const ff_asf_guid ff_asf_stream_header;
//  extern const ff_asf_guid ff_asf_ext_stream_header;
//  extern const ff_asf_guid ff_asf_audio_stream;
//  extern const ff_asf_guid ff_asf_audio_conceal_none;
//  extern const ff_asf_guid ff_asf_audio_conceal_spread;
//  extern const ff_asf_guid ff_asf_video_stream;
//  extern const ff_asf_guid ff_asf_jfif_media;
//  extern const ff_asf_guid ff_asf_video_conceal_none;
//  extern const ff_asf_guid ff_asf_command_stream;
//  extern const ff_asf_guid ff_asf_comment_header;
//  extern const ff_asf_guid ff_asf_codec_comment_header;
//  extern const ff_asf_guid ff_asf_codec_comment1_header;
//  extern const ff_asf_guid ff_asf_data_header;
//  extern const ff_asf_guid ff_asf_head1_guid;
//  extern const ff_asf_guid ff_asf_head2_guid;
//  extern const ff_asf_guid ff_asf_extended_content_header;
//  extern const ff_asf_guid ff_asf_simple_index_header;
//  extern const ff_asf_guid ff_asf_ext_stream_embed_stream_header;
//  extern const ff_asf_guid ff_asf_ext_stream_audio_stream;
//  extern const ff_asf_guid ff_asf_metadata_header;
//  extern const ff_asf_guid ff_asf_metadata_library_header;
//  extern const ff_asf_guid ff_asf_marker_header;
//  extern const ff_asf_guid ff_asf_reserved_4;
//  extern const ff_asf_guid ff_asf_my_guid;
//  extern const ff_asf_guid ff_asf_language_guid;
//  extern const ff_asf_guid ff_asf_content_encryption;
//  extern const ff_asf_guid ff_asf_ext_content_encryption;
//  extern const ff_asf_guid ff_asf_digital_signature;
//  extern const ff_asf_guid ff_asf_extended_stream_properties_object;
//  extern const ff_asf_guid ff_asf_group_mutual_exclusion_object;
//  extern const ff_asf_guid ff_asf_mutex_language;

//  extern const AVMetadataConv ff_asf_metadata_conv[];

[Flags]
public enum ASFPacketFlags {
    ASF_PACKET_FLAG_ERROR_CORRECTION_PRESENT; //1000 0000
}


//   ASF data packet structure
//   =========================
//
//
//  -----------------------------------
// | Error Correction Data             |  Optional
//  -----------------------------------
// | Payload Parsing Information (PPI) |
//  -----------------------------------
// | Payload Data                      |
//  -----------------------------------
// | Padding Data                      |
//  -----------------------------------


// PPI_FLAG - Payload parsing information flags
public enum ASFPayloadParsingFlags {
    ASF_PPI_FLAG_MULTIPLE_PAYLOADS_PRESENT,

    ASF_PPI_FLAG_SEQUENCE_FIELD_IS_BYTE, //0000 0010
    ASF_PPI_FLAG_SEQUENCE_FIELD_IS_WORD, //0000 0100
    ASF_PPI_FLAG_SEQUENCE_FIELD_IS_DWORD, //0000 0110
    ASF_PPI_MASK_SEQUENCE_FIELD_SIZE, //0000 0110

    ASF_PPI_FLAG_PADDING_LENGTH_FIELD_IS_BYTE, //0000 1000
    ASF_PPI_FLAG_PADDING_LENGTH_FIELD_IS_WORD, //0001 0000
    ASF_PPI_FLAG_PADDING_LENGTH_FIELD_IS_DWORD, //0001 1000
    ASF_PPI_MASK_PADDING_LENGTH_FIELD_SIZE, //0001 1000

    ASF_PPI_FLAG_PACKET_LENGTH_FIELD_IS_BYTE, //0010 0000
    ASF_PPI_FLAG_PACKET_LENGTH_FIELD_IS_WORD, //0100 0000
    ASF_PPI_FLAG_PACKET_LENGTH_FIELD_IS_DWORD, //0110 0000
    ASF_PPI_MASK_PACKET_LENGTH_FIELD_SIZE, //0110 0000
}

// PL_FLAG - Payload flags
public enum ASFPayloadFlags {
    ASF_PL_FLAG_REPLICATED_DATA_LENGTH_FIELD_IS_BYTE, //0000 0001
    ASF_PL_FLAG_REPLICATED_DATA_LENGTH_FIELD_IS_WORD, //0000 0010
    ASF_PL_FLAG_REPLICATED_DATA_LENGTH_FIELD_IS_DWORD, //0000 0011
    ASF_PL_MASK_REPLICATED_DATA_LENGTH_FIELD_SIZE, //0000 0011

    ASF_PL_FLAG_OFFSET_INTO_MEDIA_OBJECT_LENGTH_FIELD_IS_BYTE, //0000 0100
    ASF_PL_FLAG_OFFSET_INTO_MEDIA_OBJECT_LENGTH_FIELD_IS_WORD, //0000 1000
    ASF_PL_FLAG_OFFSET_INTO_MEDIA_OBJECT_LENGTH_FIELD_IS_DWORD, //0000 1100
    ASF_PL_MASK_OFFSET_INTO_MEDIA_OBJECT_LENGTH_FIELD_SIZE, //0000 1100

    ASF_PL_FLAG_MEDIA_OBJECT_NUMBER_LENGTH_FIELD_IS_BYTE, //0001 0000
    ASF_PL_FLAG_MEDIA_OBJECT_NUMBER_LENGTH_FIELD_IS_WORD, //0010 0000
    ASF_PL_FLAG_MEDIA_OBJECT_NUMBER_LENGTH_FIELD_IS_DWORD, //0011 0000
    ASF_PL_MASK_MEDIA_OBJECT_NUMBER_LENGTH_FIELD_SIZE, //0011 0000

    ASF_PL_FLAG_STREAM_NUMBER_LENGTH_FIELD_IS_BYTE, //0100 0000
    ASF_PL_MASK_STREAM_NUMBER_LENGTH_FIELD_SIZE, //1100 0000

    ASF_PL_FLAG_PAYLOAD_LENGTH_FIELD_IS_BYTE, //0100 0000
    ASF_PL_FLAG_PAYLOAD_LENGTH_FIELD_IS_WORD, //1000 0000
    ASF_PL_MASK_PAYLOAD_LENGTH_FIELD_SIZE, //1100 0000

    ASF_PL_FLAG_KEY_FRAME; //1000 0000
}
